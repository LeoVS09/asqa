version: "3.9"

services:

   # Research of NNs for whole solution
   model-notebook:
      build:
         context: ./model
      ports: 
         - 8890:8890
         - 6006:6006
      runtime: nvidia
      volumes:
         - ./model:/work/.

      depends_on: 
         - elasticsearch
      links:
         - elasticsearch

   elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
      ports:
         - 9200:9200
         - 9300:9300
      volumes:
         - elasticsearch_data:/usr/share/elasticsearch/data
      environment:
         ES_JAVA_OPTS: "-Xmx256m -Xms256m"
         ELASTIC_PASSWORD: pass
         # Use single node discovery in order to disable production mode and avoid bootstrap checks.
         # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
         discovery.type: single-node

   # GraphQl gateway service for search and answers
   platform-gateway:
      image: graphql/gateway
      links:
         - search
         - answer
      depends_on:
         - search
         - answer
      ports:
         - 8910:80
      environment: # TODO: use graphql manager service in production https://github.com/graphql-services/graphql-gateway
         - GRAPHQL_URL_0=http://search:8894/graphql
         - GRAPHQL_URL_1=http://answer:8904/graphql
         - GRAPHQL_UPDATE_GATEWAY=false # Not working actually
      deploy: 
         restart_policy:
            condition: any
            delay: 5s
   
   # Search engine service
   search:
      build:
         context: ./search
      container_name: asqa_search_dev
      ports:
         - 8894:8894
         - 8895:8895
      volumes:
         - ./search/:/app/.
      environment:
         - SERVER_PORT=8894
         - MONGODB_URL=mongodb://root:example@mongo:27017/
         - COMPRESS_INDEX=true
      depends_on: 
         - mongo
      links:
         - mongo

   mongo:
      image: mongo
      restart: always
      environment:
         MONGO_INITDB_ROOT_USERNAME: root
         MONGO_INITDB_ROOT_PASSWORD: example
      volumes:
         - ./mongo-data/database:/data/db
         - ./mongo-data/archive:/archive
      ports:
         - 27017:27017

   mongo-ui:
      image: mongo-express
      restart: always
      ports:
         - 8081:8081
      environment:
         ME_CONFIG_MONGODB_ADMINUSERNAME: root
         ME_CONFIG_MONGODB_ADMINPASSWORD: example
         ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

   # Answering NN service
   answer:
      build:
         context: ./answer
      container_name: asqa_answer_dev
      ports:
         - 8904:8904
         - 8905:8905
      volumes:
         - ./answer/:/app/.
      environment:
         - SERVER_PORT=8904

   core:
      build:
         context: ./core
      container_name: asqa_core_dev
      ports:
         - 8915:8915
         - 9229:9229
      volumes:
         - ./core/:/app/.
      environment:
         - SERVER_PORT=8915
         - KAFKA_BROKER_URL=kafka:9092
         - KAFKA_CLIENT_ID=asqa-core
         - KAFKA_CONSUMER_GROUP_ID=asqa-consumer
         - PLATFORM_GQL_URL=http://platform-gateway/graphql
      depends_on: 
         - kafka
         - platform-gateway
      links:
         - kafka
         - platform-gateway

   telegram_integration:
      build:
         context: ./integrations/telegram
      container_name: asqa_telegram_integration_dev
      ports:
         - 8916:8916
      volumes:
         - ./integrations/telegram/:/app/.
      env_file:
         ./integrations/telegram/.env
      depends_on: 
         - kafka
      links:
         - kafka
   
   kafka:
      image: docker.io/bitnami/kafka:2
      ports:
         - "9092:9092"
      volumes:
         - "kafka_data:/bitnami"
      environment:
         - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
         - ALLOW_PLAINTEXT_LISTENER=yes
         # username: user
         # password: bitnami
      depends_on:
         - zookeeper
   # For create event, attach console and run
   # /opt/bitnami/kafka/bin/kafka-console-producer.sh --topic my-first-topic --bootstrap-server localhost:9092
   # More info at https://kafka.apache.org/quickstart

   zookeeper:  
      image: docker.io/bitnami/zookeeper:3.7
      ports:
         - "2181:2181"
      volumes:
         - "zookeeper_data:/bitnami"
      environment:
         - ALLOW_ANONYMOUS_LOGIN=yes
   
   kafka-ui:
      image: obsidiandynamics/kafdrop
      restart: always
      ports:
         - "9000:9000"
      environment:
         KAFKA_BROKERCONNECT: "kafka:9092"
      depends_on:
         - kafka
      links:
         - kafka

volumes:
   elasticsearch_data:
      driver: local
   zookeeper_data:
      driver: local
   kafka_data:
      driver: local

