version: "3.9"

services:

   # Research of NNs for whole solution
   model-notebook:
      build:
         context: ./model
      ports: 
         - 8890:8890
         - 6006:6006
      runtime: nvidia
      volumes:
         - ./model:/work/.

      # depends_on: 
      #    - elasticsearch

   elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
      ports:
         - 9200:9200
         - 9300:9300
      volumes:
         - elasticsearch_data:/usr/share/elasticsearch/data
      environment:
         ES_JAVA_OPTS: "-Xmx256m -Xms256m"
         ELASTIC_PASSWORD: pass
         # Use single node discovery in order to disable production mode and avoid bootstrap checks.
         # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
         discovery.type: single-node

   # GraphQl gateway service for search and answers
   platform-gateway:
      image: graphql/gateway
      ports:
         - 8910:80
      environment: # TODO: use graphql manager service in production https://github.com/graphql-services/graphql-gateway
         - GRAPHQL_URL_0=http://search:8894/graphql
         - GRAPHQL_URL_1=http://answer:8904/graphql
         - GRAPHQL_UPDATE_GATEWAY=false # Not working actually
      deploy: 
         restart_policy:
            condition: any
            delay: 5s
      depends_on:
         - search
         - answer
   
   # Search engine service
   search:
      build:
         context: ./search
      container_name: asqa_search_dev
      ports:
         - 8894:8894
         - 8895:8895
      volumes:
         - ./search/:/app/.
         - ./search-data/:/cache/.
      environment:
         - SERVER_PORT=8894
         - MONGODB_URL=mongodb://root:example@mongo:27017/
         - CACHE_FOLDER=/cache
      env_file: 
         - ./search/.env
      depends_on: 
         - mongo

   mongo:
      image: mongo
      restart: always
      environment:
         MONGO_INITDB_ROOT_USERNAME: root
         MONGO_INITDB_ROOT_PASSWORD: example
      volumes:
         - ./mongo-data/database:/data/db
         - ./mongo-data/archive:/archive
      ports:
         - 27017:27017

   mongo-ui:
      image: mongo-express
      restart: always
      ports:
         - 8081:8081
      environment:
         ME_CONFIG_MONGODB_ADMINUSERNAME: root
         ME_CONFIG_MONGODB_ADMINPASSWORD: example
         ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

   answer2gql:
      build:
         context: ./answer2gql
      container_name: asqa_core_dev
      ports:
         - 8914:8914
      volumes:
         - ./answer2gql/:/app/.
      environment:
         - PORT=8914
         - ANSWER_URL=http://answer:8904
      depends_on: 
         - answer

   # Answering NN service
   answer:
      build:
         context: ./answer
      container_name: asqa_answer_dev
      # network_mode: host # for prod
      ports:
         - 8904:8904
         - 5001:5001 # /livez - health check port
      volumes:
         - ./answer/:/app/.
         - ./answer-data/:/cache/.
         - ./data/answer/bentoml/:/bentoml/.
      environment:
         - BENTOML_PORT=8904
         - BENTOML_GUNICORN_WORKERS=1
         - CACHE_FOLDER=/cache
         - BENTOML_HOME=/bentoml
         - MODEL_NAME=AnswerService:latest
         - YATAI_URL=model-registry-manager:50051
         # - YATAI_URL=localhost:50051 # for prod
      env_file: 
         - ./search/.env
      depends_on: 
         - model-registry-manager

   model-registry-manager:
      image: bentoml/yatai-service:0.13.1
      ports:
         - 50051:50051 # GRPC port
         - 3000:3000 # UI port
      environment:
         - BENTOML_HOME=/bentoml
      volumes:
         - ./data/registry/bentoml/:/bentoml/.
      # production: --s3-endpoint-url=https://s3.eu-central-1.wasabisys.com --repo-base-url=s3://asqa-bentoml-services/
      command: --db-url=postgresql://postgres:examplepass@postgresdb:5432/bentomldb --s3-endpoint-url=http://minio:9000 --repo-base-url=s3://asqa-models/
      env_file: 
         ./.env
      depends_on: 
         - postgresdb
         - minio

   postgresdb:
      image: postgres:13.4
      restart: always
      ports:
         - 5432:5432
      environment:
         - POSTGRES_PASSWORD=examplepass
         - POSTGRES_USER=postgres
         - PGDATA=/var/lib/postgresql/data
         - POSTGRES_DB=bentomldb
      volumes:
         - ./data/postgres/data:/var/lib/postgresql/data

   minio:
      image: quay.io/minio/minio
      entrypoint: sh
      command: -c 'mkdir -p /data/asqa-models && /usr/bin/minio server /data --console-address ":9001"'
      expose:
         - "9000"
         - "9001"
      environment:
         MINIO_ROOT_USER: minio
         MINIO_ROOT_PASSWORD: minio123
      healthcheck:
         test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
         interval: 30s
         timeout: 20s
         retries: 3
      volumes:
         - ./data/minio/data:/data

   postgres-ui:
      image: adminer
      restart: always
      ports:
         - 8082:8080
      depends_on: 
         - postgresdb

   core:
      build:
         context: ./core
      container_name: asqa_core_dev
      ports:
         - 8915:8915
      volumes:
         - ./core/:/app/.
      environment:
         - SERVER_PORT=8915
         - KAFKA_BROKER_URL=kafka:9092
         - KAFKA_CLIENT_ID=asqa-core
         - KAFKA_CONSUMER_GROUP_ID=asqa-consumer
         - PLATFORM_GQL_URL=http://platform-gateway/graphql
      depends_on: 
         - kafka
         - platform-gateway

   telegram_integration:
      build:
         context: ./integrations/telegram
      container_name: asqa_telegram_integration_dev
      ports:
         - 8916:8916
      volumes:
         - ./integrations/telegram/:/app/.
      env_file:
         ./integrations/telegram/.env
      depends_on: 
         - kafka
   
   kafka:
      image: docker.io/bitnami/kafka:2
      ports:
         - "9092:9092"
      volumes:
         - "kafka_data:/bitnami"
      environment:
         - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
         - ALLOW_PLAINTEXT_LISTENER=yes
         # username: user
         # password: bitnami
      depends_on:
         - zookeeper
   # For create event, attach console and run
   # /opt/bitnami/kafka/bin/kafka-console-producer.sh --topic my-first-topic --bootstrap-server localhost:9092
   # More info at https://kafka.apache.org/quickstart

   zookeeper:  
      image: docker.io/bitnami/zookeeper:3.7
      ports:
         - "2181:2181"
      volumes:
         - "zookeeper_data:/bitnami"
      environment:
         - ALLOW_ANONYMOUS_LOGIN=yes
   
   kafka-ui:
      image: obsidiandynamics/kafdrop
      restart: always
      ports:
         - "9000:9000"
      environment:
         KAFKA_BROKERCONNECT: "kafka:9092"
      depends_on:
         - kafka
      links:
         - kafka

volumes:
   elasticsearch_data:
      driver: local
   zookeeper_data:
      driver: local
   kafka_data:
      driver: local

