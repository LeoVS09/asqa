"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  search(input: SearchInput!): SearchResults!
  answer(input: QuestionInput!): Answers!
}

input SearchInput {
  questions: [String!]!

  """Count of passages to return, per question"""
  passages_count: Int = 10
}

type SearchResults {
  nodes: [SearchResult!]!
}

type SearchResult {
  question: String!

  """Passages of texts for question"""
  passages: [Passage!]!
}

type Passage {
  datasets_id: Int

  """Id of entity in wikidata, can be linked to wikipedia page"""
  wiki_id: String

  """Score of relativity passage to answer, bigger better"""
  score: Float
  start_paragraph: Int
  end_paragraph: Int
  start_character: Int
  end_character: Int
  article_title: String!
  section_title: String!
  passage_text: String!
}

input QuestionInput {
  """Question on which need to answer"""
  question: String!

  """Context for given question"""
  context: String!
}

type Answers {
  """List of answers on questions"""
  nodes: [Answer!]!
}

type Answer {
  text: String!
}
